# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

class Cell:

    def __init__(self, cell_cells):
        self.cell_cells = cell_cells

    def __add__(self, other):
        self.a = self.cell_cells + other.cell_cells

        return Cell(self.cell_cells + other.cell_cells)

    def __sub__(self, other):
        if self.cell_cells - other.cell_cells > 0:
            return Cell(self.cell_cells - other.cell_cells)
        return Cell(self.cell_cells)

    def __mul__(self, other):
        return Cell(self.cell_cells * other.cell_cells)

    def __truediv__(self, other):
        return Cell(self.cell_cells // other.cell_cells)

    def __str__(self):
        return f'клетка с {self.cell_cells} ячейками'

    def make_order(self, l):
        result = ''
        for i in range(self.cell_cells // l):
            result += '*' * l + '\n'
        result += '*' * (self.cell_cells % l) + '\n'
        return result

a = Cell(30)
b = Cell(10)
c = Cell(2)
print(a + b + c)
print(a - b - c)
print(a * b * c)
print(a / b / c)
print((a + b + c).make_order(7))
print((a - b - c).make_order(7))
print(a.make_order(7))