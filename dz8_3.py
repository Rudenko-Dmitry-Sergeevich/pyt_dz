# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
# При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class Err(Exception):
    def __init__(self, txt):
        self.txt = txt

add_list = []
while True:
    my_list = input('"stop" отановит программу. Делайте ввод через пробел: ').split()
    if my_list == ['stop']:
        break
    add_list += my_list

    try:
        for i in my_list:
            if i.isdigit() == False:
                raise Err('не число значения:')
    except Err as err:
        x = (i for i in my_list if i.isdigit() == False)
        print(f'{err}{[i for i in my_list if i.isdigit() == False]}')
        [add_list.remove(i) for i in my_list if i.isdigit() == False]

    print(add_list)
print(f'конечный список чисел: {add_list}')
